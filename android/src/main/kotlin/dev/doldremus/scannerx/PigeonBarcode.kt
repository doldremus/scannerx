// Copyright 2022 Doldremus. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v5.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.doldremus.scannerx

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon. */

enum class BarcodeFormat(val raw: Int) {
  /**
   * Barcode format unknown to the current SDK.
   *
   * Constant Value: -1
   */
  UNKNOWN(0),
  /**
   * Barcode format constant representing the union of all supported formats.
   *
   * Constant Value: 0
   */
  ALL(1),
  /**
   * Barcode format constant for Code 128.
   *
   * Constant Value: 1
   */
  CODE128(2),
  /**
   * Barcode format constant for Code 39.
   *
   * Constant Value: 2
   */
  CODE39(3),
  /**
   * Barcode format constant for Code 93.
   *
   * Constant Value: 4
   */
  CODE93(4),
  /**
   * Barcode format constant for Codabar.
   *
   * Constant Value: 8
   */
  CODEBAR(5),
  /**
   * Barcode format constant for Data Matrix.
   *
   * Constant Value: 16
   */
  DATAMATRIX(6),
  /**
   * Barcode format constant for EAN-13.
   *
   * Constant Value: 32
   */
  EAN13(7),
  /**
   * Barcode format constant for EAN-8.
   *
   * Constant Value: 64
   */
  EAN8(8),
  /**
   * Barcode format constant for ITF (Interleaved Two-of-Five).
   *
   * Constant Value: 128
   */
  ITF(9),
  /**
   * Barcode format constant for QR Code.
   *
   * Constant Value: 256
   */
  QRCODE(10),
  /**
   * Barcode format constant for UPC-A.
   *
   * Constant Value: 512
   */
  UPCA(11),
  /**
   * Barcode format constant for UPC-E.
   *
   * Constant Value: 1024
   */
  UPCE(12),
  /**
   * Barcode format constant for PDF-417.
   *
   * Constant Value: 2048
   */
  PDF417(13),
  /**
   * Barcode format constant for AZTEC.
   *
   * Constant Value: 4096
   */
  AZTEC(14);

  companion object {
    fun ofRaw(raw: Int): BarcodeFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Barcode value type constants */
enum class BarcodeType(val raw: Int) {
  /**
   * Barcode value type unknown, which indicates the current version of SDK cannot recognize the structure of the barcode. Developers can inspect the raw value instead.
   *
   * Constant Value: 0
   */
  UNKNOWN(0),
  /**
   * Barcode value type constant for contact information.
   *
   * Constant Value: 1
   */
  CONTACTINFO(1),
  /**
   * Barcode value type constant for email message details.
   *
   * Constant Value: 2
   */
  EMAIL(2),
  /**
   * Barcode value type constant for ISBNs.
   *
   * Constant Value: 3
   */
  ISBN(3),
  /**
   * Barcode value type constant for phone numbers.
   *
   * Constant Value: 4
   */
  PHONE(4),
  /**
   * Barcode value type constant for product codes.
   *
   * Constant Value: 5
   */
  PRODUCT(5),
  /**
   * Barcode value type constant for SMS details.
   *
   * Constant Value: 6
   */
  SMS(6),
  /**
   * Barcode value type constant for plain text.
   *
   * Constant Value: 7
   */
  TEXT(7),
  /**
   * Barcode value type constant for URLs/bookmarks.
   *
   * Constant Value: 8
   */
  URL(8),
  /**
   * Barcode value type constant for WiFi access point details.
   *
   * Constant Value: 9
   */
  WIFI(9),
  /**
   * Barcode value type constant for geographic coordinates.
   *
   * Constant Value: 10
   */
  GEO(10),
  /**
   * Barcode value type constant for calendar events.
   *
   * Constant Value: 11
   */
  CALENDAREVENT(11),
  /**
   * Barcode value type constant for driver's license data.
   *
   * Constant Value: 12
   */
  DRIVERLICENSE(12);

  companion object {
    fun ofRaw(raw: Int): BarcodeType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RawBarcode (
  val corners: List<BarcodeOffset?>? = null,
  val boundingBox: BarcodeBoundingBox? = null,
  val rawBytes: ByteArray? = null,
  val rawValue: String? = null,
  val format: BarcodeFormat? = null,
  val type: BarcodeType? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RawBarcode {
      val corners = list[0] as? List<BarcodeOffset?>
      val boundingBox: BarcodeBoundingBox? = (list[1] as? List<Any?>)?.let {
        BarcodeBoundingBox.fromList(it)
      }
      val rawBytes = list[2] as? ByteArray
      val rawValue = list[3] as? String
      val format: BarcodeFormat? = (list[4] as? Int)?.let {
        BarcodeFormat.ofRaw(it)
      }
      val type: BarcodeType? = (list[5] as? Int)?.let {
        BarcodeType.ofRaw(it)
      }

      return RawBarcode(corners, boundingBox, rawBytes, rawValue, format, type)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      corners,
      boundingBox?.toList(),
      rawBytes,
      rawValue,
      format?.raw,
      type?.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BarcodeBoundingBox (
  val left: Double,
  val top: Double,
  val right: Double,
  val bottom: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BarcodeBoundingBox {
      val left = list[0] as Double
      val top = list[1] as Double
      val right = list[2] as Double
      val bottom = list[3] as Double

      return BarcodeBoundingBox(left, top, right, bottom)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      left,
      top,
      right,
      bottom,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BarcodeOffset (
  val x: Double,
  val y: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BarcodeOffset {
      val x = list[0] as Double
      val y = list[1] as Double

      return BarcodeOffset(x, y)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      x,
      y,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object BarcodeFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BarcodeBoundingBox.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BarcodeOffset.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RawBarcode.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BarcodeBoundingBox -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is BarcodeOffset -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is RawBarcode -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BarcodeFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BarcodeFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      BarcodeFlutterApiCodec
    }
  }
  fun barcodes(barcodesArg: List<RawBarcode>?, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeFlutterApi.barcodes", codec)
    channel.send(listOf(barcodesArg)) {
      callback()
    }
  }
}

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

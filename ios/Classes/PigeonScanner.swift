// Copyright 2022 Doldremus. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v5.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

enum CameraLensDirection: Int {
  case front = 0
  case back = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScannerOptions {
  var targetResolution: Resolution? = nil
  var lensDirection: CameraLensDirection? = nil

  static func fromList(_ list: [Any?]) -> ScannerOptions? {
    var targetResolution: Resolution? = nil
    if let targetResolutionList = list[0] as? [Any?] {
      targetResolution = Resolution.fromList(targetResolutionList)
    }
    var lensDirection: CameraLensDirection? = nil
    if let lensDirectionRawValue = list[1] as? Int {
      lensDirection = CameraLensDirection(rawValue: lensDirectionRawValue)
    }

    return ScannerOptions(
      targetResolution: targetResolution,
      lensDirection: lensDirection
    )
  }
  func toList() -> [Any?] {
    return [
      targetResolution?.toList(),
      lensDirection?.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RawScannerDescription {
  var texture: RawTextureDescription
  var analysis: RawAnalysisDescription

  static func fromList(_ list: [Any?]) -> RawScannerDescription? {
    let texture = RawTextureDescription.fromList(list[0] as! [Any?])!
    let analysis = RawAnalysisDescription.fromList(list[1] as! [Any?])!

    return RawScannerDescription(
      texture: texture,
      analysis: analysis
    )
  }
  func toList() -> [Any?] {
    return [
      texture.toList(),
      analysis.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RawTextureDescription {
  var id: Int32
  var resolution: Resolution

  static func fromList(_ list: [Any?]) -> RawTextureDescription? {
    let id = list[0] as! Int32
    let resolution = Resolution.fromList(list[1] as! [Any?])!

    return RawTextureDescription(
      id: id,
      resolution: resolution
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      resolution.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RawAnalysisDescription {
  var resolution: Resolution

  static func fromList(_ list: [Any?]) -> RawAnalysisDescription? {
    let resolution = Resolution.fromList(list[0] as! [Any?])!

    return RawAnalysisDescription(
      resolution: resolution
    )
  }
  func toList() -> [Any?] {
    return [
      resolution.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Resolution {
  var width: Double
  var height: Double

  static func fromList(_ list: [Any?]) -> Resolution? {
    let width = list[0] as! Double
    let height = list[1] as! Double

    return Resolution(
      width: width,
      height: height
    )
  }
  func toList() -> [Any?] {
    return [
      width,
      height,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PermissionsResponse {
  var granted: Bool
  var permanentlyDenied: Bool

  static func fromList(_ list: [Any?]) -> PermissionsResponse? {
    let granted = list[0] as! Bool
    let permanentlyDenied = list[1] as! Bool

    return PermissionsResponse(
      granted: granted,
      permanentlyDenied: permanentlyDenied
    )
  }
  func toList() -> [Any?] {
    return [
      granted,
      permanentlyDenied,
    ]
  }
}

private class ScannerHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return PermissionsResponse.fromList(self.readValue() as! [Any])      
      case 129:
        return RawAnalysisDescription.fromList(self.readValue() as! [Any])      
      case 130:
        return RawScannerDescription.fromList(self.readValue() as! [Any])      
      case 131:
        return RawTextureDescription.fromList(self.readValue() as! [Any])      
      case 132:
        return Resolution.fromList(self.readValue() as! [Any])      
      case 133:
        return Resolution.fromList(self.readValue() as! [Any])      
      case 134:
        return ScannerOptions.fromList(self.readValue() as! [Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class ScannerHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PermissionsResponse {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? RawAnalysisDescription {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? RawScannerDescription {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? RawTextureDescription {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? Resolution {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? Resolution {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ScannerOptions {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ScannerHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ScannerHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ScannerHostApiCodecWriter(data: data)
  }
}

class ScannerHostApiCodec: FlutterStandardMessageCodec {
  static let shared = ScannerHostApiCodec(readerWriter: ScannerHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ScannerHostApi {
  func requestPermissions(completion: @escaping (PermissionsResponse) -> Void)
  func initialize(options: ScannerOptions, completion: @escaping (RawScannerDescription?) -> Void)
  func dispose(completion: @escaping () -> Void)
  func hasFlashlight() -> Bool
  func getFlashlightState() -> Bool
  func setFlashlightState(state: Bool)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ScannerHostApiSetup {
  /// The codec used by ScannerHostApi.
  static var codec: FlutterStandardMessageCodec { ScannerHostApiCodec.shared }
  /// Sets up an instance of `ScannerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ScannerHostApi?) {
    let requestPermissionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ScannerHostApi.requestPermissions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPermissionsChannel.setMessageHandler { _, reply in
        api.requestPermissions() { result in
          reply(wrapResult(result))
        }
      }
    } else {
      requestPermissionsChannel.setMessageHandler(nil)
    }
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ScannerHostApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! ScannerOptions
        api.initialize(options: optionsArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ScannerHostApi.dispose", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { _, reply in
        api.dispose() {
          reply(wrapResult(nil))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
    let hasFlashlightChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ScannerHostApi.hasFlashlight", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      hasFlashlightChannel.setMessageHandler { _, reply in
        let result = api.hasFlashlight()
        reply(wrapResult(result))
      }
    } else {
      hasFlashlightChannel.setMessageHandler(nil)
    }
    let getFlashlightStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ScannerHostApi.getFlashlightState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getFlashlightStateChannel.setMessageHandler { _, reply in
        let result = api.getFlashlightState()
        reply(wrapResult(result))
      }
    } else {
      getFlashlightStateChannel.setMessageHandler(nil)
    }
    let setFlashlightStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ScannerHostApi.setFlashlightState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setFlashlightStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let stateArg = args[0] as! Bool
        api.setFlashlightState(state: stateArg)
        reply(wrapResult(nil))
      }
    } else {
      setFlashlightStateChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: FlutterError) -> [Any?] {
  return [
    error.code,
    error.message,
    error.details
  ]
}

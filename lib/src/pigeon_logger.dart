// Copyright 2022 Doldremus. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v5.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum LogLevel {
  none,
  critical,
  error,
  warning,
  informational,
  verbose,
}

class LoggerError {
  LoggerError({
    this.className,
    this.cause,
    this.message,
    this.stackTrace,
    required this.isCritical,
  });

  String? className;

  String? cause;

  String? message;

  String? stackTrace;

  bool isCritical;

  Object encode() {
    return <Object?>[
      className,
      cause,
      message,
      stackTrace,
      isCritical,
    ];
  }

  static LoggerError decode(Object result) {
    result as List<Object?>;
    return LoggerError(
      className: result[0] as String?,
      cause: result[1] as String?,
      message: result[2] as String?,
      stackTrace: result[3] as String?,
      isCritical: result[4]! as bool,
    );
  }
}

class LoggerMessage {
  LoggerMessage({
    required this.message,
    required this.logLevel,
  });

  String message;

  LogLevel logLevel;

  Object encode() {
    return <Object?>[
      message,
      logLevel.index,
    ];
  }

  static LoggerMessage decode(Object result) {
    result as List<Object?>;
    return LoggerMessage(
      message: result[0]! as String,
      logLevel: LogLevel.values[result[1]! as int]
,
    );
  }
}

class _LoggerFlutterApiCodec extends StandardMessageCodec {
  const _LoggerFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is LoggerError) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LoggerMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return LoggerError.decode(readValue(buffer)!);
      
      case 129:       
        return LoggerMessage.decode(readValue(buffer)!);
      
      default:

        return super.readValueOfType(type, buffer);
      
    }
  }
}

abstract class LoggerFlutterApi {
  static const MessageCodec<Object?> codec = _LoggerFlutterApiCodec();

  void logError(LoggerError error);

  void logMessage(LoggerMessage message);

  static void setup(LoggerFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.LoggerFlutterApi.logError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.LoggerFlutterApi.logError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final LoggerError? arg_error = (args[0] as LoggerError?);
          assert(arg_error != null, 'Argument for dev.flutter.pigeon.LoggerFlutterApi.logError was null, expected non-null LoggerError.');
          api.logError(arg_error!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.LoggerFlutterApi.logMessage', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.LoggerFlutterApi.logMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final LoggerMessage? arg_message = (args[0] as LoggerMessage?);
          assert(arg_message != null, 'Argument for dev.flutter.pigeon.LoggerFlutterApi.logMessage was null, expected non-null LoggerMessage.');
          api.logMessage(arg_message!);
          return;
        });
      }
    }
  }
}

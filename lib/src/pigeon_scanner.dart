// Copyright 2022 Doldremus. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v5.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum CameraLensDirection {
  front,
  back,
}

class ScannerOptions {
  ScannerOptions({
    this.targetResolution,
    this.lensDirection,
  });

  Resolution? targetResolution;

  CameraLensDirection? lensDirection;

  Object encode() {
    return <Object?>[
      targetResolution?.encode(),
      lensDirection?.index,
    ];
  }

  static ScannerOptions decode(Object result) {
    result as List<Object?>;
    return ScannerOptions(
      targetResolution: result[0] != null
          ? Resolution.decode(result[0]! as List<Object?>)
          : null,
      lensDirection: result[1] != null
          ? CameraLensDirection.values[result[1]! as int]
          : null,
    );
  }
}

class RawScannerDescription {
  RawScannerDescription({
    required this.texture,
    required this.analysis,
  });

  RawTextureDescription texture;

  RawAnalysisDescription analysis;

  Object encode() {
    return <Object?>[
      texture.encode(),
      analysis.encode(),
    ];
  }

  static RawScannerDescription decode(Object result) {
    result as List<Object?>;
    return RawScannerDescription(
      texture: RawTextureDescription.decode(result[0]! as List<Object?>)
,
      analysis: RawAnalysisDescription.decode(result[1]! as List<Object?>)
,
    );
  }
}

class RawTextureDescription {
  RawTextureDescription({
    required this.id,
    required this.resolution,
  });

  int id;

  Resolution resolution;

  Object encode() {
    return <Object?>[
      id,
      resolution.encode(),
    ];
  }

  static RawTextureDescription decode(Object result) {
    result as List<Object?>;
    return RawTextureDescription(
      id: result[0]! as int,
      resolution: Resolution.decode(result[1]! as List<Object?>)
,
    );
  }
}

class RawAnalysisDescription {
  RawAnalysisDescription({
    required this.resolution,
  });

  Resolution resolution;

  Object encode() {
    return <Object?>[
      resolution.encode(),
    ];
  }

  static RawAnalysisDescription decode(Object result) {
    result as List<Object?>;
    return RawAnalysisDescription(
      resolution: Resolution.decode(result[0]! as List<Object?>)
,
    );
  }
}

class Resolution {
  Resolution({
    required this.width,
    required this.height,
  });

  double width;

  double height;

  Object encode() {
    return <Object?>[
      width,
      height,
    ];
  }

  static Resolution decode(Object result) {
    result as List<Object?>;
    return Resolution(
      width: result[0]! as double,
      height: result[1]! as double,
    );
  }
}

class _ScannerHostApiCodec extends StandardMessageCodec {
  const _ScannerHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is RawAnalysisDescription) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is RawScannerDescription) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is RawTextureDescription) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is Resolution) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is Resolution) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ScannerOptions) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return RawAnalysisDescription.decode(readValue(buffer)!);
      
      case 129:       
        return RawScannerDescription.decode(readValue(buffer)!);
      
      case 130:       
        return RawTextureDescription.decode(readValue(buffer)!);
      
      case 131:       
        return Resolution.decode(readValue(buffer)!);
      
      case 132:       
        return Resolution.decode(readValue(buffer)!);
      
      case 133:       
        return ScannerOptions.decode(readValue(buffer)!);
      
      default:

        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ScannerHostApi {
  /// Constructor for [ScannerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ScannerHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ScannerHostApiCodec();

  Future<bool> requestPermissions() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScannerHostApi.requestPermissions', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<RawScannerDescription?> init(ScannerOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScannerHostApi.init', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_options]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as RawScannerDescription?);
    }
  }

  Future<void> dispose() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScannerHostApi.dispose', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> hasFlashlight() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScannerHostApi.hasFlashlight', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> getFlashlightState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScannerHostApi.getFlashlightState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> setFlashlightState(bool arg_state) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ScannerHostApi.setFlashlightState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_state]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
